// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mnl_loglik_gradient_parallel
Rcpp::List mnl_loglik_gradient_parallel(const arma::vec& theta, const arma::mat& X, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mnl_loglik_gradient_parallel(SEXP thetaSEXP, SEXP XSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_loglik_gradient_parallel(theta, X, alt_idx, choice_idx, M, weights, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// mnl_loglik_numeric_hessian
arma::mat mnl_loglik_numeric_hessian(const arma::vec& theta, const arma::mat& X, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, bool use_asc, bool include_outside_option, double eps);
RcppExport SEXP _choicer_mnl_loglik_numeric_hessian(SEXP thetaSEXP, SEXP XSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< bool >::type include_outside_option(include_outside_optionSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_loglik_numeric_hessian(theta, X, alt_idx, choice_idx, M, weights, use_asc, include_outside_option, eps));
    return rcpp_result_gen;
END_RCPP
}
// mnl_predict
Rcpp::List mnl_predict(const arma::vec& theta, const arma::mat& X, const arma::uvec& alt_idx, const Rcpp::IntegerVector& M, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mnl_predict(SEXP thetaSEXP, SEXP XSEXP, SEXP alt_idxSEXP, SEXP MSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_predict(theta, X, alt_idx, M, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// mnl_predict_shares
arma::vec mnl_predict_shares(const arma::vec& theta, const arma::mat& X, const arma::uvec& alt_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mnl_predict_shares(SEXP thetaSEXP, SEXP XSEXP, SEXP alt_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_predict_shares(theta, X, alt_idx, M, weights, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// blp_contraction
arma::vec blp_contraction(const arma::vec& delta, const arma::vec& target_shares, const arma::mat& X, const arma::vec& beta, const arma::uvec& alt_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const bool include_outside_option, const double tol, const int max_iter);
RcppExport SEXP _choicer_blp_contraction(SEXP deltaSEXP, SEXP target_sharesSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP alt_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP include_outside_optionSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type target_shares(target_sharesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(blp_contraction(delta, target_shares, X, beta, alt_idx, M, weights, include_outside_option, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// mnl_loglik_hessian_parallel
arma::mat mnl_loglik_hessian_parallel(const arma::vec& theta, const arma::mat& X, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mnl_loglik_hessian_parallel(SEXP thetaSEXP, SEXP XSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mnl_loglik_hessian_parallel(theta, X, alt_idx, choice_idx, M, weights, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// build_L_mat
arma::mat build_L_mat(const arma::vec& L_params, const int K_w, const bool rc_correlation);
RcppExport SEXP _choicer_build_L_mat(SEXP L_paramsSEXP, SEXP K_wSEXP, SEXP rc_correlationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type L_params(L_paramsSEXP);
    Rcpp::traits::input_parameter< const int >::type K_w(K_wSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    rcpp_result_gen = Rcpp::wrap(build_L_mat(L_params, K_w, rc_correlation));
    return rcpp_result_gen;
END_RCPP
}
// build_var_mat
arma::mat build_var_mat(const arma::vec& L_params, const int K_w, const bool rc_correlation);
RcppExport SEXP _choicer_build_var_mat(SEXP L_paramsSEXP, SEXP K_wSEXP, SEXP rc_correlationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type L_params(L_paramsSEXP);
    Rcpp::traits::input_parameter< const int >::type K_w(K_wSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    rcpp_result_gen = Rcpp::wrap(build_var_mat(L_params, K_w, rc_correlation));
    return rcpp_result_gen;
END_RCPP
}
// mxl_loglik_gradient_parallel
Rcpp::List mxl_loglik_gradient_parallel(const arma::vec& theta, const arma::mat& X, const arma::mat& W, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const arma::cube& eta_draws, const bool rc_correlation, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mxl_loglik_gradient_parallel(SEXP thetaSEXP, SEXP XSEXP, SEXP WSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP eta_drawsSEXP, SEXP rc_correlationSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_draws(eta_drawsSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mxl_loglik_gradient_parallel(theta, X, W, alt_idx, choice_idx, M, weights, eta_draws, rc_correlation, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// mxl_loglik_numeric_hessian
arma::mat mxl_loglik_numeric_hessian(const arma::vec& theta, const arma::mat& X, const arma::mat& W, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const arma::cube& eta_draws, const bool rc_correlation, const bool use_asc, const bool include_outside_option, double eps);
RcppExport SEXP _choicer_mxl_loglik_numeric_hessian(SEXP thetaSEXP, SEXP XSEXP, SEXP WSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP eta_drawsSEXP, SEXP rc_correlationSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_draws(eta_drawsSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(mxl_loglik_numeric_hessian(theta, X, W, alt_idx, choice_idx, M, weights, eta_draws, rc_correlation, use_asc, include_outside_option, eps));
    return rcpp_result_gen;
END_RCPP
}
// jacobian_vech_Sigma
arma::mat jacobian_vech_Sigma(const arma::vec& L_params, const int K_w, const bool rc_correlation);
RcppExport SEXP _choicer_jacobian_vech_Sigma(SEXP L_paramsSEXP, SEXP K_wSEXP, SEXP rc_correlationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type L_params(L_paramsSEXP);
    Rcpp::traits::input_parameter< const int >::type K_w(K_wSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    rcpp_result_gen = Rcpp::wrap(jacobian_vech_Sigma(L_params, K_w, rc_correlation));
    return rcpp_result_gen;
END_RCPP
}
// mxl_hessian_parallel
arma::mat mxl_hessian_parallel(const arma::vec& theta, const arma::mat& X, const arma::mat& W, const arma::uvec& alt_idx, const arma::uvec& choice_idx, const Rcpp::IntegerVector& M, const arma::vec& weights, const arma::cube& eta_draws, const bool rc_correlation, const bool use_asc, const bool include_outside_option);
RcppExport SEXP _choicer_mxl_hessian_parallel(SEXP thetaSEXP, SEXP XSEXP, SEXP WSEXP, SEXP alt_idxSEXP, SEXP choice_idxSEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP eta_drawsSEXP, SEXP rc_correlationSEXP, SEXP use_ascSEXP, SEXP include_outside_optionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type alt_idx(alt_idxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type choice_idx(choice_idxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eta_draws(eta_drawsSEXP);
    Rcpp::traits::input_parameter< const bool >::type rc_correlation(rc_correlationSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_asc(use_ascSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_outside_option(include_outside_optionSEXP);
    rcpp_result_gen = Rcpp::wrap(mxl_hessian_parallel(theta, X, W, alt_idx, choice_idx, M, weights, eta_draws, rc_correlation, use_asc, include_outside_option));
    return rcpp_result_gen;
END_RCPP
}
// get_num_threads
void get_num_threads();
RcppExport SEXP _choicer_get_num_threads() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    get_num_threads();
    return R_NilValue;
END_RCPP
}
// set_num_threads
void set_num_threads(int n_threads);
RcppExport SEXP _choicer_set_num_threads(SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    set_num_threads(n_threads);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_choicer_mnl_loglik_gradient_parallel", (DL_FUNC) &_choicer_mnl_loglik_gradient_parallel, 8},
    {"_choicer_mnl_loglik_numeric_hessian", (DL_FUNC) &_choicer_mnl_loglik_numeric_hessian, 9},
    {"_choicer_mnl_predict", (DL_FUNC) &_choicer_mnl_predict, 6},
    {"_choicer_mnl_predict_shares", (DL_FUNC) &_choicer_mnl_predict_shares, 7},
    {"_choicer_blp_contraction", (DL_FUNC) &_choicer_blp_contraction, 10},
    {"_choicer_mnl_loglik_hessian_parallel", (DL_FUNC) &_choicer_mnl_loglik_hessian_parallel, 8},
    {"_choicer_build_L_mat", (DL_FUNC) &_choicer_build_L_mat, 3},
    {"_choicer_build_var_mat", (DL_FUNC) &_choicer_build_var_mat, 3},
    {"_choicer_mxl_loglik_gradient_parallel", (DL_FUNC) &_choicer_mxl_loglik_gradient_parallel, 11},
    {"_choicer_mxl_loglik_numeric_hessian", (DL_FUNC) &_choicer_mxl_loglik_numeric_hessian, 12},
    {"_choicer_jacobian_vech_Sigma", (DL_FUNC) &_choicer_jacobian_vech_Sigma, 3},
    {"_choicer_mxl_hessian_parallel", (DL_FUNC) &_choicer_mxl_hessian_parallel, 11},
    {"_choicer_get_num_threads", (DL_FUNC) &_choicer_get_num_threads, 0},
    {"_choicer_set_num_threads", (DL_FUNC) &_choicer_set_num_threads, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_choicer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
